plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "org.hidetake.ssh" version "2.10.1"
}

remotes {
	rio{
		host = '10.1.95.2'
		user = 'admin'
		password = ''
	}
}

ssh.settings {
	knownHosts = allowAnyHosts
    timeoutSec = 30
}


//For this task to run successfully, you must have the following in your system path:
//protoc
//roborio toolchain (wpilib/2022/roborio/bin/)
task protoc {
    doFirst {
        exec {
            workingDir "$projectDir/src/main/proto"
            project.logger.lifecycle('Generating C++ Code from .proto files')
            commandLine 'bash', '-c', 'rm -Rf ../protogen; mkdir -p ../protogen; protoc --cpp_out=../protogen/ *.proto'
        }
        exec {
            workingDir "$projectDir/src/main/protogen"
            project.logger.lifecycle('Compiling generated source...')
            commandLine 'bash', '-c', 'arm-frc2022-linux-gnueabi-g++ -c *.cc -I ../include/ -I ./ -std=c++11 -O3'
        }
        exec {
            workingDir "$projectDir/src/main/protogen"
            project.logger.lifecycle('Linking compiled source into static lib...')
            commandLine 'bash', '-c', 'arm-frc2022-linux-gnueabi-ar crf ../../../lib/librosproto.a *.o'
        }
    }
}

build.dependsOn protoc
build.mustRunAfter protoc

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(195)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp
wpi.cpp.debugSimulation = false
wpi.sim.addGui().defaultEnabled = false
wpi.sim.addDriverstation()
//Sets the websocket client remote host.
wpi.sim.envVar("HALSIMWS_HOST", "10.0.0.2")
wpi.sim.addWebsocketsServer().defaultEnabled = false
wpi.sim.addWebsocketsClient().defaultEnabled = false
// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

model {
    repositories {
        libs(PrebuiltLibraries) {
            libzmq {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file( projectDir.absolutePath + "/lib/libzmq_4.3.4.so")
                }
            }

            libprotobuf {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file( projectDir.absolutePath + "/lib/libprotobuf_3.18.0.so")
                }
            }

            librosproto {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file( projectDir.absolutePath + "/lib/librosproto.a")
                }
            }
        }
    }

    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    // srcDir 'src/main/protogen'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                    srcDir 'src/main/protogen'
                    include '**/*.h', '**/*.hpp'
                }
                //If libraries are not found, copy them to arm eabi gnu++ lib folder (remove version num from name or add simlink)
                lib library: 'libzmq', linkage: 'shared'
                lib library: 'libprotobuf', linkage: 'shared'
                lib library: 'librosproto', linkage: 'static'
                binaries.all {
                    cppCompiler.args << "-Werror"
                    // cppCompiler.args << "-g"    //Generate debug info for stack trace
                    // cppCompiler.args << "-rdynamic" //Export symbols for stack trace
                    linker.args << "-lzmq"
                    linker.args << "-lprotobuf"
                    // cppCompiler.args.each{ value -> 
                    //     project.logger.lifecycle(value)
                    // }
                }
            }

            deployArtifact.component = it
            wpi.cpp.enableExternalTasks(it)


            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
}

wrapper {
    gradleVersion = '7.3.3'
    distributionType = Wrapper.DistributionType.BIN
}