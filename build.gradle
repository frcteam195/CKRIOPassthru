plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2021.3.1"
    id "org.hidetake.ssh" version "2.10.1"
}

remotes {
	rio{
		host = '10.1.95.2'
		user = 'admin'
		password = ''
	}
}

ssh.settings {
	knownHosts = allowAnyHosts
    timeoutSec = 30
}


//For this task to run successfully, you must have the following in your system path:
//protoc
//roborio toolchain (wpilib/2021/roborio/bin/)
task protoc {
    doFirst {
        exec {
            workingDir "$projectDir/src/main/proto"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cmd', '/c', 'protoc --cpp_out=..\\protogen *.proto'
            } else {
                //commandLine 'sh', '-c', 'mkdir -p ../protogen; protoc --cpp_out=../protogen/ *.proto; rm -Rf ../cpp/protogen; rm -Rf ../include/protogen; mkdir -p ../cpp/protogen; mkdir -p ../include/protogen; mv ../protogen/*.h ../include/protogen; mv ../protogen/*.cc ../cpp/protogen; rm -Rf ../protogen/'
                commandLine 'sh', '-c', 'rm -Rf ../protogen; mkdir -p ../protogen; protoc --cpp_out=../protogen/ *.proto'
            }
        }
        exec {
            workingDir "$projectDir/src/main/protogen"
            commandLine 'sh', '-c', 'arm-frc2021-linux-gnueabi-g++ -c *.cc -I ../include/ -I ./ -std=c++11 -O3'
        }
        exec {
            workingDir "$projectDir/src/main/protogen"
            commandLine 'sh', '-c', 'arm-frc2021-linux-gnueabi-ar crf ../../../lib/librosproto.a *.o'
        }
    }
}

build.dependsOn protoc
build.mustRunAfter protoc

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(195)
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Enable simulation gui support. Must check the box in vscode to enable support
// upon debugging
dependencies {
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

    // Websocket extensions require additional configuration.
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, true)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, true)
}

// Simulation configuration (e.g. environment variables).
sim {
    // Sets the websocket client remote host.
    // envVar "HALSIMWS_HOST", "10.0.0.2"
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            libzmq {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file( projectDir.absolutePath + "/lib/libzmq_4.3.4.so")
                }
            }

            libprotobuf {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file( projectDir.absolutePath + "/lib/libprotobuf_3.18.0.so")
                }
            }

            librosproto {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file( projectDir.absolutePath + "/lib/librosproto.a")
                }
            }
        }
    }

    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    // srcDir 'src/main/protogen'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                    srcDir 'src/main/protogen'
                    include '**/*.h', '**/*.hpp'
                }
                //If libraries are not found, copy them to arm eabi gnu++ lib folder (remove version num from name or add simlink)
                lib library: 'libzmq', linkage: 'shared'
                lib library: 'libprotobuf', linkage: 'shared'
                lib library: 'librosproto', linkage: 'static'
                binaries.all {
                    //cppCompiler.args << "-std=c++11"
                    linker.args << "-lzmq"
                    linker.args << "-lprotobuf"
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
        }
    }
    // testSuites {
    //     frcUserProgramTest(GoogleTestTestSuiteSpec) {
    //         testing $.components.frcUserProgram

    //         sources.cpp {
    //             source {
    //                 srcDir 'src/test/cpp'
    //                 include '**/*.cpp'
    //             }
    //         }

    //         wpi.deps.vendor.cpp(it)
    //         wpi.deps.wpilib(it)
    //         wpi.deps.googleTest(it)
    //     }
    // }
}

// task deployriolibs {
// 	group 'embeddedtools'
// 	doLast {
// 		project.logger.lifecycle("Deploying RIO IPKs")
// 		ssh.run {
// 			session(remotes.rio) {
// 				execute 'sudo mkdir -p /tmp/lib'
// 				put from: fileTree(dir: 'lib/'), into: '/tmp/lib'
//  				execute 'sudo chmod -R 777 /tmp/lib'
//  				execute 'cp /tmp/lib/* /usr/lib/'
//  				execute 'sudo rm -Rf /tmp/lib'
//                 execute '/sbin/ldconfig'
//  				execute 'sudo sync'
// 			}
// 		}
// 	}
// }

// task deployRIOIPKs {
// 	group 'embeddedtools'
// 	doLast {
// 		project.logger.lifecycle("Deploying RIO IPKs")
// 		ssh.run {
// 			session(remotes.rio) {
// 				execute 'sudo mkdir -p /tmp/ipks'
// 				put from: fileTree(dir: 'ipks/'), into: '/tmp/ipks'
//  				execute 'sudo chmod -R 777 /tmp/ipks'
//  				execute 'cd /tmp/ipks && for f in *.ipk; do sudo opkg install "$f" --force-overwrite; done'
//  				execute 'sudo rm -Rf /tmp/ipks'
//  				execute 'sudo sync'
// 			}
// 		}
// 	}
// }
