// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotControl.proto

#include "RobotControl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ControlData::ControlData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0)
  , control_mode_(0)
{}
struct ControlDataDefaultTypeInternal {
  constexpr ControlDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlDataDefaultTypeInternal() {}
  union {
    ControlData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlDataDefaultTypeInternal _ControlData_default_instance_;
constexpr Motor::Motor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_data_(nullptr)
  , controller_type_(0)

  , id_(0){}
struct MotorDefaultTypeInternal {
  constexpr MotorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorDefaultTypeInternal() {}
  union {
    Motor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorDefaultTypeInternal _Motor_default_instance_;
constexpr RobotControl::RobotControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : motors_(){}
struct RobotControlDefaultTypeInternal {
  constexpr RobotControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotControlDefaultTypeInternal() {}
  union {
    RobotControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotControlDefaultTypeInternal _RobotControl_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RobotControl_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_RobotControl_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RobotControl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RobotControl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlData, control_mode_),
  PROTOBUF_FIELD_OFFSET(::ControlData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Motor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Motor, controller_type_),
  PROTOBUF_FIELD_OFFSET(::Motor, id_),
  PROTOBUF_FIELD_OFFSET(::Motor, control_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RobotControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RobotControl, motors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ControlData)},
  { 8, -1, -1, sizeof(::Motor)},
  { 17, -1, -1, sizeof(::RobotControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControlData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Motor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotControl_default_instance_),
};

const char descriptor_table_protodef_RobotControl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022RobotControl.proto\"z\n\013ControlData\022.\n\014c"
  "ontrol_mode\030\001 \001(\0162\030.ControlData.ControlM"
  "ode\022\r\n\005value\030\002 \001(\001\",\n\013ControlMode\022\022\n\016PER"
  "CENT_OUTPUT\020\000\022\t\n\005SLAVE\020\001\"\226\001\n\005Motor\022.\n\017co"
  "ntroller_type\030\001 \001(\0162\025.Motor.ControllerTy"
  "pe\022\n\n\002id\030\002 \001(\005\022\"\n\014control_data\030\003 \001(\0132\014.C"
  "ontrolData\"-\n\016ControllerType\022\r\n\tTALON_SR"
  "X\020\000\022\014\n\010TALON_FX\020\001\"&\n\014RobotControl\022\026\n\006mot"
  "ors\030\001 \003(\0132\006.Motorb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RobotControl_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotControl_2eproto = {
  false, false, 345, descriptor_table_protodef_RobotControl_2eproto, "RobotControl.proto", 
  &descriptor_table_RobotControl_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_RobotControl_2eproto::offsets,
  file_level_metadata_RobotControl_2eproto, file_level_enum_descriptors_RobotControl_2eproto, file_level_service_descriptors_RobotControl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_RobotControl_2eproto_getter() {
  return &descriptor_table_RobotControl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_RobotControl_2eproto(&descriptor_table_RobotControl_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlData_ControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotControl_2eproto);
  return file_level_enum_descriptors_RobotControl_2eproto[0];
}
bool ControlData_ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlData_ControlMode ControlData::PERCENT_OUTPUT;
constexpr ControlData_ControlMode ControlData::SLAVE;
constexpr ControlData_ControlMode ControlData::ControlMode_MIN;
constexpr ControlData_ControlMode ControlData::ControlMode_MAX;
constexpr int ControlData::ControlMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motor_ControllerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotControl_2eproto);
  return file_level_enum_descriptors_RobotControl_2eproto[1];
}
bool Motor_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Motor_ControllerType Motor::TALON_SRX;
constexpr Motor_ControllerType Motor::TALON_FX;
constexpr Motor_ControllerType Motor::ControllerType_MIN;
constexpr Motor_ControllerType Motor::ControllerType_MAX;
constexpr int Motor::ControllerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ControlData::_Internal {
 public:
};

ControlData::ControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlData)
}
ControlData::ControlData(const ControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_mode_) -
    reinterpret_cast<char*>(&value_)) + sizeof(control_mode_));
  // @@protoc_insertion_point(copy_constructor:ControlData)
}

void ControlData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_mode_) -
    reinterpret_cast<char*>(&value_)) + sizeof(control_mode_));
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:ControlData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlData::ArenaDtor(void* object) {
  ControlData* _this = reinterpret_cast< ControlData* >(object);
  (void)_this;
}
void ControlData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_mode_) -
      reinterpret_cast<char*>(&value_)) + sizeof(control_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlData.ControlMode control_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::ControlData_ControlMode>(val));
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlData.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_control_mode(), target);
  }

  // double value = 2;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlData)
  return target;
}

size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    total_size += 1 + 8;
  }

  // .ControlData.ControlMode control_mode = 1;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlData::GetClassData() const { return &_class_data_; }

void ControlData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlData *>(to)->MergeFrom(
      static_cast<const ControlData &>(from));
}


void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_value() <= 0 && from._internal_value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_control_mode() != 0) {
    _internal_set_control_mode(from._internal_control_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlData, control_mode_)
      + sizeof(ControlData::control_mode_)
      - PROTOBUF_FIELD_OFFSET(ControlData, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RobotControl_2eproto_getter, &descriptor_table_RobotControl_2eproto_once,
      file_level_metadata_RobotControl_2eproto[0]);
}

// ===================================================================

class Motor::_Internal {
 public:
  static const ::ControlData& control_data(const Motor* msg);
};

const ::ControlData&
Motor::_Internal::control_data(const Motor* msg) {
  return *msg->control_data_;
}
Motor::Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Motor)
}
Motor::Motor(const Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_control_data()) {
    control_data_ = new ::ControlData(*from.control_data_);
  } else {
    control_data_ = nullptr;
  }
  ::memcpy(&controller_type_, &from.controller_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&controller_type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Motor)
}

void Motor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&control_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&control_data_)) + sizeof(id_));
}

Motor::~Motor() {
  // @@protoc_insertion_point(destructor:Motor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Motor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete control_data_;
}

void Motor::ArenaDtor(void* object) {
  Motor* _this = reinterpret_cast< Motor* >(object);
  (void)_this;
}
void Motor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Motor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && control_data_ != nullptr) {
    delete control_data_;
  }
  control_data_ = nullptr;
  ::memset(&controller_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&controller_type_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Motor.ControllerType controller_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_controller_type(static_cast<::Motor_ControllerType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlData control_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Motor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Motor.ControllerType controller_type = 1;
  if (this->_internal_controller_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_controller_type(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .ControlData control_data = 3;
  if (this->_internal_has_control_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Motor)
  return target;
}

size_t Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Motor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlData control_data = 3;
  if (this->_internal_has_control_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_data_);
  }

  // .Motor.ControllerType controller_type = 1;
  if (this->_internal_controller_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_controller_type());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Motor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motor::GetClassData() const { return &_class_data_; }

void Motor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Motor *>(to)->MergeFrom(
      static_cast<const Motor &>(from));
}


void Motor::MergeFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Motor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control_data()) {
    _internal_mutable_control_data()->::ControlData::MergeFrom(from._internal_control_data());
  }
  if (from._internal_controller_type() != 0) {
    _internal_set_controller_type(from._internal_controller_type());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motor::CopyFrom(const Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motor::IsInitialized() const {
  return true;
}

void Motor::InternalSwap(Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor, id_)
      + sizeof(Motor::id_)
      - PROTOBUF_FIELD_OFFSET(Motor, control_data_)>(
          reinterpret_cast<char*>(&control_data_),
          reinterpret_cast<char*>(&other->control_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Motor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RobotControl_2eproto_getter, &descriptor_table_RobotControl_2eproto_once,
      file_level_metadata_RobotControl_2eproto[1]);
}

// ===================================================================

class RobotControl::_Internal {
 public:
};

RobotControl::RobotControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  motors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RobotControl)
}
RobotControl::RobotControl(const RobotControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      motors_(from.motors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RobotControl)
}

void RobotControl::SharedCtor() {
}

RobotControl::~RobotControl() {
  // @@protoc_insertion_point(destructor:RobotControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotControl::ArenaDtor(void* object) {
  RobotControl* _this = reinterpret_cast< RobotControl* >(object);
  (void)_this;
}
void RobotControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotControl::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Motor motors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Motor motors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_motors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_motors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotControl)
  return target;
}

size_t RobotControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Motor motors = 1;
  total_size += 1UL * this->_internal_motors_size();
  for (const auto& msg : this->motors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotControl::GetClassData() const { return &_class_data_; }

void RobotControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotControl *>(to)->MergeFrom(
      static_cast<const RobotControl &>(from));
}


void RobotControl::MergeFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotControl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motors_.MergeFrom(from.motors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotControl::CopyFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotControl::IsInitialized() const {
  return true;
}

void RobotControl::InternalSwap(RobotControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  motors_.InternalSwap(&other->motors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RobotControl_2eproto_getter, &descriptor_table_RobotControl_2eproto_once,
      file_level_metadata_RobotControl_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ControlData* Arena::CreateMaybeMessage< ::ControlData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::Motor* Arena::CreateMaybeMessage< ::Motor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotControl* Arena::CreateMaybeMessage< ::RobotControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
