// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotControl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotControl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotControl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotControl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotControl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotControl_2eproto;
class ControlData;
struct ControlDataDefaultTypeInternal;
extern ControlDataDefaultTypeInternal _ControlData_default_instance_;
class Motor;
struct MotorDefaultTypeInternal;
extern MotorDefaultTypeInternal _Motor_default_instance_;
class RobotControl;
struct RobotControlDefaultTypeInternal;
extern RobotControlDefaultTypeInternal _RobotControl_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ControlData* Arena::CreateMaybeMessage<::ControlData>(Arena*);
template<> ::Motor* Arena::CreateMaybeMessage<::Motor>(Arena*);
template<> ::RobotControl* Arena::CreateMaybeMessage<::RobotControl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ControlData_ControlMode : int {
  ControlData_ControlMode_PERCENT_OUTPUT = 0,
  ControlData_ControlMode_SLAVE = 1,
  ControlData_ControlMode_ControlData_ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlData_ControlMode_ControlData_ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlData_ControlMode_IsValid(int value);
constexpr ControlData_ControlMode ControlData_ControlMode_ControlMode_MIN = ControlData_ControlMode_PERCENT_OUTPUT;
constexpr ControlData_ControlMode ControlData_ControlMode_ControlMode_MAX = ControlData_ControlMode_SLAVE;
constexpr int ControlData_ControlMode_ControlMode_ARRAYSIZE = ControlData_ControlMode_ControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlData_ControlMode_descriptor();
template<typename T>
inline const std::string& ControlData_ControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlData_ControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlData_ControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlData_ControlMode_descriptor(), enum_t_value);
}
inline bool ControlData_ControlMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlData_ControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlData_ControlMode>(
    ControlData_ControlMode_descriptor(), name, value);
}
enum Motor_ControllerType : int {
  Motor_ControllerType_TALON_SRX = 0,
  Motor_ControllerType_TALON_FX = 1,
  Motor_ControllerType_Motor_ControllerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Motor_ControllerType_Motor_ControllerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Motor_ControllerType_IsValid(int value);
constexpr Motor_ControllerType Motor_ControllerType_ControllerType_MIN = Motor_ControllerType_TALON_SRX;
constexpr Motor_ControllerType Motor_ControllerType_ControllerType_MAX = Motor_ControllerType_TALON_FX;
constexpr int Motor_ControllerType_ControllerType_ARRAYSIZE = Motor_ControllerType_ControllerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motor_ControllerType_descriptor();
template<typename T>
inline const std::string& Motor_ControllerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Motor_ControllerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Motor_ControllerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Motor_ControllerType_descriptor(), enum_t_value);
}
inline bool Motor_ControllerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Motor_ControllerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Motor_ControllerType>(
    Motor_ControllerType_descriptor(), name, value);
}
// ===================================================================

class ControlData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlData) */ {
 public:
  inline ControlData() : ControlData(nullptr) {}
  ~ControlData() override;
  explicit constexpr ControlData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlData(const ControlData& from);
  ControlData(ControlData&& from) noexcept
    : ControlData() {
    *this = ::std::move(from);
  }

  inline ControlData& operator=(const ControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData& operator=(ControlData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlData* internal_default_instance() {
    return reinterpret_cast<const ControlData*>(
               &_ControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlData& a, ControlData& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlData* New() const final {
    return new ControlData();
  }

  ControlData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlData";
  }
  protected:
  explicit ControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlData_ControlMode ControlMode;
  static constexpr ControlMode PERCENT_OUTPUT =
    ControlData_ControlMode_PERCENT_OUTPUT;
  static constexpr ControlMode SLAVE =
    ControlData_ControlMode_SLAVE;
  static inline bool ControlMode_IsValid(int value) {
    return ControlData_ControlMode_IsValid(value);
  }
  static constexpr ControlMode ControlMode_MIN =
    ControlData_ControlMode_ControlMode_MIN;
  static constexpr ControlMode ControlMode_MAX =
    ControlData_ControlMode_ControlMode_MAX;
  static constexpr int ControlMode_ARRAYSIZE =
    ControlData_ControlMode_ControlMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControlMode_descriptor() {
    return ControlData_ControlMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ControlMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControlMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControlMode_Name.");
    return ControlData_ControlMode_Name(enum_t_value);
  }
  static inline bool ControlMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ControlMode* value) {
    return ControlData_ControlMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kControlModeFieldNumber = 1,
  };
  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // .ControlData.ControlMode control_mode = 1;
  void clear_control_mode();
  ::ControlData_ControlMode control_mode() const;
  void set_control_mode(::ControlData_ControlMode value);
  private:
  ::ControlData_ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::ControlData_ControlMode value);
  public:

  // @@protoc_insertion_point(class_scope:ControlData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  int control_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotControl_2eproto;
};
// -------------------------------------------------------------------

class Motor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Motor) */ {
 public:
  inline Motor() : Motor(nullptr) {}
  ~Motor() override;
  explicit constexpr Motor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motor(const Motor& from);
  Motor(Motor&& from) noexcept
    : Motor() {
    *this = ::std::move(from);
  }

  inline Motor& operator=(const Motor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor& operator=(Motor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor* internal_default_instance() {
    return reinterpret_cast<const Motor*>(
               &_Motor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Motor& a, Motor& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Motor* New() const final {
    return new Motor();
  }

  Motor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Motor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Motor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Motor";
  }
  protected:
  explicit Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Motor_ControllerType ControllerType;
  static constexpr ControllerType TALON_SRX =
    Motor_ControllerType_TALON_SRX;
  static constexpr ControllerType TALON_FX =
    Motor_ControllerType_TALON_FX;
  static inline bool ControllerType_IsValid(int value) {
    return Motor_ControllerType_IsValid(value);
  }
  static constexpr ControllerType ControllerType_MIN =
    Motor_ControllerType_ControllerType_MIN;
  static constexpr ControllerType ControllerType_MAX =
    Motor_ControllerType_ControllerType_MAX;
  static constexpr int ControllerType_ARRAYSIZE =
    Motor_ControllerType_ControllerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControllerType_descriptor() {
    return Motor_ControllerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ControllerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControllerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControllerType_Name.");
    return Motor_ControllerType_Name(enum_t_value);
  }
  static inline bool ControllerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ControllerType* value) {
    return Motor_ControllerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kControlDataFieldNumber = 3,
    kControllerTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .ControlData control_data = 3;
  bool has_control_data() const;
  private:
  bool _internal_has_control_data() const;
  public:
  void clear_control_data();
  const ::ControlData& control_data() const;
  PROTOBUF_MUST_USE_RESULT ::ControlData* release_control_data();
  ::ControlData* mutable_control_data();
  void set_allocated_control_data(::ControlData* control_data);
  private:
  const ::ControlData& _internal_control_data() const;
  ::ControlData* _internal_mutable_control_data();
  public:
  void unsafe_arena_set_allocated_control_data(
      ::ControlData* control_data);
  ::ControlData* unsafe_arena_release_control_data();

  // .Motor.ControllerType controller_type = 1;
  void clear_controller_type();
  ::Motor_ControllerType controller_type() const;
  void set_controller_type(::Motor_ControllerType value);
  private:
  ::Motor_ControllerType _internal_controller_type() const;
  void _internal_set_controller_type(::Motor_ControllerType value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Motor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ControlData* control_data_;
  int controller_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotControl_2eproto;
};
// -------------------------------------------------------------------

class RobotControl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotControl) */ {
 public:
  inline RobotControl() : RobotControl(nullptr) {}
  ~RobotControl() override;
  explicit constexpr RobotControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotControl(const RobotControl& from);
  RobotControl(RobotControl&& from) noexcept
    : RobotControl() {
    *this = ::std::move(from);
  }

  inline RobotControl& operator=(const RobotControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotControl& operator=(RobotControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotControl* internal_default_instance() {
    return reinterpret_cast<const RobotControl*>(
               &_RobotControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotControl& a, RobotControl& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotControl* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotControl* New() const final {
    return new RobotControl();
  }

  RobotControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotControl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotControl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotControl& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotControl";
  }
  protected:
  explicit RobotControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorsFieldNumber = 1,
  };
  // repeated .Motor motors = 1;
  int motors_size() const;
  private:
  int _internal_motors_size() const;
  public:
  void clear_motors();
  ::Motor* mutable_motors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Motor >*
      mutable_motors();
  private:
  const ::Motor& _internal_motors(int index) const;
  ::Motor* _internal_add_motors();
  public:
  const ::Motor& motors(int index) const;
  ::Motor* add_motors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Motor >&
      motors() const;

  // @@protoc_insertion_point(class_scope:RobotControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Motor > motors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RobotControl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlData

// .ControlData.ControlMode control_mode = 1;
inline void ControlData::clear_control_mode() {
  control_mode_ = 0;
}
inline ::ControlData_ControlMode ControlData::_internal_control_mode() const {
  return static_cast< ::ControlData_ControlMode >(control_mode_);
}
inline ::ControlData_ControlMode ControlData::control_mode() const {
  // @@protoc_insertion_point(field_get:ControlData.control_mode)
  return _internal_control_mode();
}
inline void ControlData::_internal_set_control_mode(::ControlData_ControlMode value) {
  
  control_mode_ = value;
}
inline void ControlData::set_control_mode(::ControlData_ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:ControlData.control_mode)
}

// double value = 2;
inline void ControlData::clear_value() {
  value_ = 0;
}
inline double ControlData::_internal_value() const {
  return value_;
}
inline double ControlData::value() const {
  // @@protoc_insertion_point(field_get:ControlData.value)
  return _internal_value();
}
inline void ControlData::_internal_set_value(double value) {
  
  value_ = value;
}
inline void ControlData::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ControlData.value)
}

// -------------------------------------------------------------------

// Motor

// .Motor.ControllerType controller_type = 1;
inline void Motor::clear_controller_type() {
  controller_type_ = 0;
}
inline ::Motor_ControllerType Motor::_internal_controller_type() const {
  return static_cast< ::Motor_ControllerType >(controller_type_);
}
inline ::Motor_ControllerType Motor::controller_type() const {
  // @@protoc_insertion_point(field_get:Motor.controller_type)
  return _internal_controller_type();
}
inline void Motor::_internal_set_controller_type(::Motor_ControllerType value) {
  
  controller_type_ = value;
}
inline void Motor::set_controller_type(::Motor_ControllerType value) {
  _internal_set_controller_type(value);
  // @@protoc_insertion_point(field_set:Motor.controller_type)
}

// int32 id = 2;
inline void Motor::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motor::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motor::id() const {
  // @@protoc_insertion_point(field_get:Motor.id)
  return _internal_id();
}
inline void Motor::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Motor::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Motor.id)
}

// .ControlData control_data = 3;
inline bool Motor::_internal_has_control_data() const {
  return this != internal_default_instance() && control_data_ != nullptr;
}
inline bool Motor::has_control_data() const {
  return _internal_has_control_data();
}
inline void Motor::clear_control_data() {
  if (GetArenaForAllocation() == nullptr && control_data_ != nullptr) {
    delete control_data_;
  }
  control_data_ = nullptr;
}
inline const ::ControlData& Motor::_internal_control_data() const {
  const ::ControlData* p = control_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlData&>(
      ::_ControlData_default_instance_);
}
inline const ::ControlData& Motor::control_data() const {
  // @@protoc_insertion_point(field_get:Motor.control_data)
  return _internal_control_data();
}
inline void Motor::unsafe_arena_set_allocated_control_data(
    ::ControlData* control_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_data_);
  }
  control_data_ = control_data;
  if (control_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Motor.control_data)
}
inline ::ControlData* Motor::release_control_data() {
  
  ::ControlData* temp = control_data_;
  control_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlData* Motor::unsafe_arena_release_control_data() {
  // @@protoc_insertion_point(field_release:Motor.control_data)
  
  ::ControlData* temp = control_data_;
  control_data_ = nullptr;
  return temp;
}
inline ::ControlData* Motor::_internal_mutable_control_data() {
  
  if (control_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlData>(GetArenaForAllocation());
    control_data_ = p;
  }
  return control_data_;
}
inline ::ControlData* Motor::mutable_control_data() {
  ::ControlData* _msg = _internal_mutable_control_data();
  // @@protoc_insertion_point(field_mutable:Motor.control_data)
  return _msg;
}
inline void Motor::set_allocated_control_data(::ControlData* control_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_data_;
  }
  if (control_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlData>::GetOwningArena(control_data);
    if (message_arena != submessage_arena) {
      control_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_data, submessage_arena);
    }
    
  } else {
    
  }
  control_data_ = control_data;
  // @@protoc_insertion_point(field_set_allocated:Motor.control_data)
}

// -------------------------------------------------------------------

// RobotControl

// repeated .Motor motors = 1;
inline int RobotControl::_internal_motors_size() const {
  return motors_.size();
}
inline int RobotControl::motors_size() const {
  return _internal_motors_size();
}
inline void RobotControl::clear_motors() {
  motors_.Clear();
}
inline ::Motor* RobotControl::mutable_motors(int index) {
  // @@protoc_insertion_point(field_mutable:RobotControl.motors)
  return motors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Motor >*
RobotControl::mutable_motors() {
  // @@protoc_insertion_point(field_mutable_list:RobotControl.motors)
  return &motors_;
}
inline const ::Motor& RobotControl::_internal_motors(int index) const {
  return motors_.Get(index);
}
inline const ::Motor& RobotControl::motors(int index) const {
  // @@protoc_insertion_point(field_get:RobotControl.motors)
  return _internal_motors(index);
}
inline ::Motor* RobotControl::_internal_add_motors() {
  return motors_.Add();
}
inline ::Motor* RobotControl::add_motors() {
  ::Motor* _add = _internal_add_motors();
  // @@protoc_insertion_point(field_add:RobotControl.motors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Motor >&
RobotControl::motors() const {
  // @@protoc_insertion_point(field_list:RobotControl.motors)
  return motors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ControlData_ControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlData_ControlMode>() {
  return ::ControlData_ControlMode_descriptor();
}
template <> struct is_proto_enum< ::Motor_ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Motor_ControllerType>() {
  return ::Motor_ControllerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotControl_2eproto
